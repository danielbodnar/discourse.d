#!/usr/bin/env bash
set -euo pipefail

# Source our libraries
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
for lib in "${SCRIPT_DIR}/lib"/*.sh; do
    source "$lib"
done

# Template variables
DOCKERFILE_TEMPLATE() {
    local VARIANT="$1"
    local BASE_IMAGE=""
    local PKG_INSTALL_CMD=""
    local PKG_CLEANUP_CMD=""

    case "$VARIANT" in
        "alpine")
            BASE_IMAGE="alpine:3.19"
            PKG_INSTALL_CMD="apk add --no-cache"
            PKG_CLEANUP_CMD="rm -rf /var/cache/apk/*"
            ;;
        "debian")
            BASE_IMAGE="debian:bookworm-slim"
            PKG_INSTALL_CMD="apt-get update && apt-get install -y --no-install-recommends"
            PKG_CLEANUP_CMD="apt-get clean && rm -rf /var/lib/apt/lists/*"
            ;;
        "ubuntu")
            BASE_IMAGE="ubuntu:22.04"
            PKG_INSTALL_CMD="apt-get update && apt-get install -y --no-install-recommends"
            PKG_CLEANUP_CMD="apt-get clean && rm -rf /var/lib/apt/lists/*"
            ;;
        *)
            error "Unsupported variant: $VARIANT"
            ;;
    esac

    cat << EOF
# This file is automatically generated. DO NOT EDIT.
# Generated on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
# Generator: $0

# Step 0001 - base image
FROM ${BASE_IMAGE} AS builder

# Step 0002 - environment setup
ENV DISCOURSE_VERSION=${DISCOURSE_VERSION:-3.2.1} \\
    RUBY_VERSION=${RUBY_VERSION:-3.2.2} \\
    NODE_VERSION=${NODE_VERSION:-18.18.0} \\
    YARN_VERSION=${YARN_VERSION:-1.22.19} \\
    BUNDLER_VERSION=${BUNDLER_VERSION:-2.4.22}


ENV DISCOURSE_USER=${DISCOURSE_USER:-discourse} \\
    DISCOURSE_GROUP=${DISCOURSE_GROUP:-discourse} \\
    DISCOURSE_HOME=${DISCOURSE_HOME:-/home/discourse} \\
    DISCOURSE_ROOT=${DISCOURSE_ROOT:-/var/www/discourse} \\
    DISCOURSE_DATA=${DISCOURSE_DATA:-/var/discourse}

ENV RAILS_ENV=${RAILS_ENV:-production} \\
    RUBY_MALLOC_ARENA_MAX=2 \\
    RUBY_GC_HEAP_GROWTH_MAX_SLOTS=40000 \\
    RUBY_GC_HEAP_INIT_SLOTS=400000 \\
    RUBY_GC_HEAP_OLDOBJECT_LIMIT_FACTOR=1.5 \\
    RUBY_GC_MALLOC_LIMIT=90000000 \\
    RUBY_GC_OLDMALLOC_LIMIT=90000000 \\
    RUBY_GC_MALLOC_LIMIT_MAX=200000000 \\
    RUBY_GC_OLDMALLOC_LIMIT_MAX=200000000 \\
    RUBY_GC_MALLOC_LIMIT_GROWTH_FACTOR=1.1 \\
    RUBY_GC_OLDMALLOC_LIMIT_GROWTH_FACTOR=1.1 \\
    RUBY_GC_HEAP_FREE_SLOTS_MIN_RATIO=0.05 \\
    RUBY_GC_HEAP_FREE_SLOTS_MAX_RATIO=0.65


ENV PATH=/usr/local/rbenv/shims:/usr/local/rbenv/bin:$PATH


# Step 0003 - system packages
RUN ${PKG_INSTALL_CMD} \\
        curl \\
        wget \\
        git \\
        build-essential \\
        imagemagick \\
        nginx \\
        postgresql-client \\
        redis-tools \\
        sudo \\
        && ${PKG_CLEANUP_CMD}

# Step 0004 - create discourse user
RUN groupadd -r \${DISCOURSE_GROUP} && \\
    useradd -r -g \${DISCOURSE_GROUP} -d \${DISCOURSE_HOME} -s /sbin/nologin \${DISCOURSE_USER} && \\
    mkdir -p \${DISCOURSE_HOME} \${DISCOURSE_ROOT} \${DISCOURSE_DATA} && \\
    chown -R \${DISCOURSE_USER}:\${DISCOURSE_GROUP} \\
        \${DISCOURSE_HOME} \\
        \${DISCOURSE_ROOT} \\
        \${DISCOURSE_DATA}

# Step 0005 - ruby setup
# TODO: implementation of setup-ruby script
COPY rootfs/base/usr/lib/setup-ruby /usr/lib/setup-ruby
RUN /usr/lib/setup-ruby

# Step 0006 - node.js setup
# TODO: implementation of setup-node script
COPY rootfs/base/usr/lib/setup-node /usr/lib/setup-node
RUN /usr/lib/setup-node

# Step 0007 - discourse download
RUN git clone --branch v\${DISCOURSE_VERSION} https://github.com/discourse/discourse.git \${DISCOURSE_ROOT}

# Step 0008 - discourse dependencies
WORKDIR \${DISCOURSE_ROOT}
RUN bundle install --deployment --without development test && \\
    yarn install --production

# Step 0009 - discourse plugins
# TODO: implementation of install-plugins script
COPY rootfs/base/usr/lib/install-plugins /usr/lib/install-plugins
RUN /usr/lib/install-plugins

# Step 0010 - asset compilation
RUN RAILS_ENV=production bundle exec rake assets:precompile

# Step 0011 - nginx configuration
# TODO: implementation of nginx configuration
COPY rootfs/base/etc/nginx/conf.d/discourse.conf /etc/nginx/conf.d/discourse.conf

# Step 0012 - discourse configuration
# TODO: implementation of discourse configuration
COPY rootfs/base/etc/discourse/discourse.conf /etc/discourse/discourse.conf
COPY rootfs/base/etc/discourse/discourse.conf.d /etc/discourse/discourse.conf.d/

# Step 0013 - initialization scripts
# TODO: implementation of initialization scripts
COPY rootfs/base/usr/lib/discourse/discourse-init /usr/lib/discourse/discourse-init
COPY rootfs/base/usr/lib/discourse/discourse-env /usr/lib/discourse/discourse-env
RUN chmod +x /usr/lib/discourse/discourse-*

# Step 0014 - volume setup
RUN mkdir -p \\
    \${DISCOURSE_DATA}/shared \\
    \${DISCOURSE_DATA}/uploads \\
    \${DISCOURSE_DATA}/backups \\
    \${DISCOURSE_DATA}/public/assets \\
    \${DISCOURSE_DATA}/plugins \\
    \${DISCOURSE_DATA}/config && \\
    chown -R \${DISCOURSE_USER}:\${DISCOURSE_GROUP} \${DISCOURSE_DATA}

# Step 0015 - backup management
# TODO: implementation of backup manager
COPY rootfs/base/usr/lib/discourse/backup-manager /usr/lib/discourse/backup-manager
RUN chmod +x /usr/lib/discourse/backup-manager

# Step 0016 - health check
# TODO: implementation of health check script
COPY rootfs/base/usr/lib/discourse/health-check /usr/lib/discourse/health-check
RUN chmod +x /usr/lib/discourse/health-check

# Final image
FROM ${BASE_IMAGE}

# Copy from builder
COPY --from=builder /usr/local /usr/local
COPY --from=builder \${DISCOURSE_ROOT} \${DISCOURSE_ROOT}
COPY --from=builder \${DISCOURSE_HOME} \${DISCOURSE_HOME}
COPY --from=builder /etc/discourse /etc/discourse
COPY --from=builder /etc/nginx /etc/nginx
COPY --from=builder /usr/lib/discourse /usr/lib/discourse

# Runtime packages
RUN ${PKG_INSTALL_CMD} \\
        nginx \\
        postgresql-client \\
        redis-tools \\
        imagemagick \\
        && ${PKG_CLEANUP_CMD}

# Create discourse user
RUN groupadd -r \${DISCOURSE_GROUP} && \\
    useradd -r -g \${DISCOURSE_GROUP} -d \${DISCOURSE_HOME} -s /sbin/nologin \${DISCOURSE_USER}

# Volume configuration
VOLUME [\
    "\${DISCOURSE_DATA}/shared",\\
    "\${DISCOURSE_DATA}/uploads",\\
    "\${DISCOURSE_DATA}/backups",\\
    "\${DISCOURSE_DATA}/public/assets",\\
    "\${DISCOURSE_DATA}/plugins",\\
    "\${DISCOURSE_DATA}/config"\\
]

# Environment setup
ENV RAILS_ENV=production \\
    DISCOURSE_HOSTNAME=localhost

# Ports
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=5m --retries=3 \\
    CMD /usr/lib/discourse/health-check

# Set user
USER \${DISCOURSE_USER}

# Working directory
WORKDIR \${DISCOURSE_ROOT}

# Entrypoint and command
ENTRYPOINT ["/usr/lib/discourse/discourse-init"]
CMD ["bundle", "exec", "puma", "-C", "config/puma.rb"]
EOF
}

# Main execution
main() {
    local variant="${1:-}"
    if [ -z "$variant" ]; then
        error "Usage: $0 <variant>"
    fi

    log "Generating Dockerfile for variant: $variant"
    DOCKERFILE_TEMPLATE "$variant" > "Dockerfile.${variant}"
    success "Generated Dockerfile.${variant}"
}

main "$@"